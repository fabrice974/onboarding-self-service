/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: thebaasco/tenant/onboarding/v1/onboarding_v1.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../google/protobuf/timestamp";
import * as dependency_2 from "./../../../../google/type/v1/date";
import * as dependency_3 from "./../../../types/v1/options";
import * as dependency_4 from "./../../../types/v1/protectedvalue";
import * as dependency_5 from "./../../../types/v1/phonenumber";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace thebaasco.tenant.onboarding.v1 {
    export class Address extends pb_1.Message {
        constructor(data?: any[] | {
            type?: string;
            organization?: string;
            line_1?: string;
            line_2?: string;
            line_3?: string;
            line_4?: string;
            line_5?: string;
            line_6?: string;
            line_7?: string;
            line_8?: string;
            locality?: string;
            dependent_locality?: string;
            double_dependent_locality?: string;
            administrative_area?: string;
            sub_administrative_area?: string;
            area?: string;
            postal_code?: string;
            country?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("organization" in data && data.organization != undefined) {
                    this.organization = data.organization;
                }
                if ("line_1" in data && data.line_1 != undefined) {
                    this.line_1 = data.line_1;
                }
                if ("line_2" in data && data.line_2 != undefined) {
                    this.line_2 = data.line_2;
                }
                if ("line_3" in data && data.line_3 != undefined) {
                    this.line_3 = data.line_3;
                }
                if ("line_4" in data && data.line_4 != undefined) {
                    this.line_4 = data.line_4;
                }
                if ("line_5" in data && data.line_5 != undefined) {
                    this.line_5 = data.line_5;
                }
                if ("line_6" in data && data.line_6 != undefined) {
                    this.line_6 = data.line_6;
                }
                if ("line_7" in data && data.line_7 != undefined) {
                    this.line_7 = data.line_7;
                }
                if ("line_8" in data && data.line_8 != undefined) {
                    this.line_8 = data.line_8;
                }
                if ("locality" in data && data.locality != undefined) {
                    this.locality = data.locality;
                }
                if ("dependent_locality" in data && data.dependent_locality != undefined) {
                    this.dependent_locality = data.dependent_locality;
                }
                if ("double_dependent_locality" in data && data.double_dependent_locality != undefined) {
                    this.double_dependent_locality = data.double_dependent_locality;
                }
                if ("administrative_area" in data && data.administrative_area != undefined) {
                    this.administrative_area = data.administrative_area;
                }
                if ("sub_administrative_area" in data && data.sub_administrative_area != undefined) {
                    this.sub_administrative_area = data.sub_administrative_area;
                }
                if ("area" in data && data.area != undefined) {
                    this.area = data.area;
                }
                if ("postal_code" in data && data.postal_code != undefined) {
                    this.postal_code = data.postal_code;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get organization() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set organization(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get line_1() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set line_1(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get line_2() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set line_2(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get line_3() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set line_3(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get line_4() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set line_4(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get line_5() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set line_5(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get line_6() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set line_6(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get line_7() {
            return pb_1.Message.getField(this, 9) as string;
        }
        set line_7(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get line_8() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set line_8(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get locality() {
            return pb_1.Message.getField(this, 11) as string;
        }
        set locality(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get dependent_locality() {
            return pb_1.Message.getField(this, 12) as string;
        }
        set dependent_locality(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get double_dependent_locality() {
            return pb_1.Message.getField(this, 13) as string;
        }
        set double_dependent_locality(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get administrative_area() {
            return pb_1.Message.getField(this, 14) as string;
        }
        set administrative_area(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get sub_administrative_area() {
            return pb_1.Message.getField(this, 15) as string;
        }
        set sub_administrative_area(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get area() {
            return pb_1.Message.getField(this, 16) as string;
        }
        set area(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get postal_code() {
            return pb_1.Message.getField(this, 17) as string;
        }
        set postal_code(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get country() {
            return pb_1.Message.getField(this, 18) as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        static fromObject(data: {
            type?: string;
            organization?: string;
            line_1?: string;
            line_2?: string;
            line_3?: string;
            line_4?: string;
            line_5?: string;
            line_6?: string;
            line_7?: string;
            line_8?: string;
            locality?: string;
            dependent_locality?: string;
            double_dependent_locality?: string;
            administrative_area?: string;
            sub_administrative_area?: string;
            area?: string;
            postal_code?: string;
            country?: string;
        }) {
            const message = new Address({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.organization != null) {
                message.organization = data.organization;
            }
            if (data.line_1 != null) {
                message.line_1 = data.line_1;
            }
            if (data.line_2 != null) {
                message.line_2 = data.line_2;
            }
            if (data.line_3 != null) {
                message.line_3 = data.line_3;
            }
            if (data.line_4 != null) {
                message.line_4 = data.line_4;
            }
            if (data.line_5 != null) {
                message.line_5 = data.line_5;
            }
            if (data.line_6 != null) {
                message.line_6 = data.line_6;
            }
            if (data.line_7 != null) {
                message.line_7 = data.line_7;
            }
            if (data.line_8 != null) {
                message.line_8 = data.line_8;
            }
            if (data.locality != null) {
                message.locality = data.locality;
            }
            if (data.dependent_locality != null) {
                message.dependent_locality = data.dependent_locality;
            }
            if (data.double_dependent_locality != null) {
                message.double_dependent_locality = data.double_dependent_locality;
            }
            if (data.administrative_area != null) {
                message.administrative_area = data.administrative_area;
            }
            if (data.sub_administrative_area != null) {
                message.sub_administrative_area = data.sub_administrative_area;
            }
            if (data.area != null) {
                message.area = data.area;
            }
            if (data.postal_code != null) {
                message.postal_code = data.postal_code;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                organization?: string;
                line_1?: string;
                line_2?: string;
                line_3?: string;
                line_4?: string;
                line_5?: string;
                line_6?: string;
                line_7?: string;
                line_8?: string;
                locality?: string;
                dependent_locality?: string;
                double_dependent_locality?: string;
                administrative_area?: string;
                sub_administrative_area?: string;
                area?: string;
                postal_code?: string;
                country?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.organization != null) {
                data.organization = this.organization;
            }
            if (this.line_1 != null) {
                data.line_1 = this.line_1;
            }
            if (this.line_2 != null) {
                data.line_2 = this.line_2;
            }
            if (this.line_3 != null) {
                data.line_3 = this.line_3;
            }
            if (this.line_4 != null) {
                data.line_4 = this.line_4;
            }
            if (this.line_5 != null) {
                data.line_5 = this.line_5;
            }
            if (this.line_6 != null) {
                data.line_6 = this.line_6;
            }
            if (this.line_7 != null) {
                data.line_7 = this.line_7;
            }
            if (this.line_8 != null) {
                data.line_8 = this.line_8;
            }
            if (this.locality != null) {
                data.locality = this.locality;
            }
            if (this.dependent_locality != null) {
                data.dependent_locality = this.dependent_locality;
            }
            if (this.double_dependent_locality != null) {
                data.double_dependent_locality = this.double_dependent_locality;
            }
            if (this.administrative_area != null) {
                data.administrative_area = this.administrative_area;
            }
            if (this.sub_administrative_area != null) {
                data.sub_administrative_area = this.sub_administrative_area;
            }
            if (this.area != null) {
                data.area = this.area;
            }
            if (this.postal_code != null) {
                data.postal_code = this.postal_code;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
                writer.writeString(1, this.type);
            if (typeof this.organization === "string" && this.organization.length)
                writer.writeString(2, this.organization);
            if (typeof this.line_1 === "string" && this.line_1.length)
                writer.writeString(3, this.line_1);
            if (typeof this.line_2 === "string" && this.line_2.length)
                writer.writeString(4, this.line_2);
            if (typeof this.line_3 === "string" && this.line_3.length)
                writer.writeString(5, this.line_3);
            if (typeof this.line_4 === "string" && this.line_4.length)
                writer.writeString(6, this.line_4);
            if (typeof this.line_5 === "string" && this.line_5.length)
                writer.writeString(7, this.line_5);
            if (typeof this.line_6 === "string" && this.line_6.length)
                writer.writeString(8, this.line_6);
            if (typeof this.line_7 === "string" && this.line_7.length)
                writer.writeString(9, this.line_7);
            if (typeof this.line_8 === "string" && this.line_8.length)
                writer.writeString(10, this.line_8);
            if (typeof this.locality === "string" && this.locality.length)
                writer.writeString(11, this.locality);
            if (typeof this.dependent_locality === "string" && this.dependent_locality.length)
                writer.writeString(12, this.dependent_locality);
            if (typeof this.double_dependent_locality === "string" && this.double_dependent_locality.length)
                writer.writeString(13, this.double_dependent_locality);
            if (typeof this.administrative_area === "string" && this.administrative_area.length)
                writer.writeString(14, this.administrative_area);
            if (typeof this.sub_administrative_area === "string" && this.sub_administrative_area.length)
                writer.writeString(15, this.sub_administrative_area);
            if (typeof this.area === "string" && this.area.length)
                writer.writeString(16, this.area);
            if (typeof this.postal_code === "string" && this.postal_code.length)
                writer.writeString(17, this.postal_code);
            if (typeof this.country === "string" && this.country.length)
                writer.writeString(18, this.country);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Address {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Address();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.organization = reader.readString();
                        break;
                    case 3:
                        message.line_1 = reader.readString();
                        break;
                    case 4:
                        message.line_2 = reader.readString();
                        break;
                    case 5:
                        message.line_3 = reader.readString();
                        break;
                    case 6:
                        message.line_4 = reader.readString();
                        break;
                    case 7:
                        message.line_5 = reader.readString();
                        break;
                    case 8:
                        message.line_6 = reader.readString();
                        break;
                    case 9:
                        message.line_7 = reader.readString();
                        break;
                    case 10:
                        message.line_8 = reader.readString();
                        break;
                    case 11:
                        message.locality = reader.readString();
                        break;
                    case 12:
                        message.dependent_locality = reader.readString();
                        break;
                    case 13:
                        message.double_dependent_locality = reader.readString();
                        break;
                    case 14:
                        message.administrative_area = reader.readString();
                        break;
                    case 15:
                        message.sub_administrative_area = reader.readString();
                        break;
                    case 16:
                        message.area = reader.readString();
                        break;
                    case 17:
                        message.postal_code = reader.readString();
                        break;
                    case 18:
                        message.country = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Address {
            return Address.deserialize(bytes);
        }
    }
    export class Employment extends pb_1.Message {
        constructor(data?: any[] | {
            employment_status?: string;
            employer_name?: string;
            industry?: string;
            occupation?: string;
            start_date?: dependency_2.google.type.v1.Date;
            end_date?: dependency_2.google.type.v1.Date;
            work_address?: Address;
            work_phone_number?: string;
            phone_number?: dependency_5.thebaasco.types.v1.PhoneNumber;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("employment_status" in data && data.employment_status != undefined) {
                    this.employment_status = data.employment_status;
                }
                if ("employer_name" in data && data.employer_name != undefined) {
                    this.employer_name = data.employer_name;
                }
                if ("industry" in data && data.industry != undefined) {
                    this.industry = data.industry;
                }
                if ("occupation" in data && data.occupation != undefined) {
                    this.occupation = data.occupation;
                }
                if ("start_date" in data && data.start_date != undefined) {
                    this.start_date = data.start_date;
                }
                if ("end_date" in data && data.end_date != undefined) {
                    this.end_date = data.end_date;
                }
                if ("work_address" in data && data.work_address != undefined) {
                    this.work_address = data.work_address;
                }
                if ("work_phone_number" in data && data.work_phone_number != undefined) {
                    this.work_phone_number = data.work_phone_number;
                }
                if ("phone_number" in data && data.phone_number != undefined) {
                    this.phone_number = data.phone_number;
                }
            }
        }
        get employment_status() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set employment_status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get employer_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set employer_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get industry() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set industry(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get occupation() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set occupation(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get start_date() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.type.v1.Date, 5) as dependency_2.google.type.v1.Date;
        }
        set start_date(value: dependency_2.google.type.v1.Date) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get end_date() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.type.v1.Date, 6) as dependency_2.google.type.v1.Date;
        }
        set end_date(value: dependency_2.google.type.v1.Date) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get work_address() {
            return pb_1.Message.getWrapperField(this, Address, 7) as Address;
        }
        set work_address(value: Address) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get work_phone_number() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set work_phone_number(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get phone_number() {
            return pb_1.Message.getWrapperField(this, dependency_5.thebaasco.types.v1.PhoneNumber, 9) as dependency_5.thebaasco.types.v1.PhoneNumber;
        }
        set phone_number(value: dependency_5.thebaasco.types.v1.PhoneNumber) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        static fromObject(data: {
            employment_status?: string;
            employer_name?: string;
            industry?: string;
            occupation?: string;
            start_date?: ReturnType<typeof dependency_2.google.type.v1.Date.prototype.toObject>;
            end_date?: ReturnType<typeof dependency_2.google.type.v1.Date.prototype.toObject>;
            work_address?: ReturnType<typeof Address.prototype.toObject>;
            work_phone_number?: string;
            phone_number?: ReturnType<typeof dependency_5.thebaasco.types.v1.PhoneNumber.prototype.toObject>;
        }) {
            const message = new Employment({});
            if (data.employment_status != null) {
                message.employment_status = data.employment_status;
            }
            if (data.employer_name != null) {
                message.employer_name = data.employer_name;
            }
            if (data.industry != null) {
                message.industry = data.industry;
            }
            if (data.occupation != null) {
                message.occupation = data.occupation;
            }
            if (data.start_date != null) {
                message.start_date = dependency_2.google.type.v1.Date.fromObject(data.start_date);
            }
            if (data.end_date != null) {
                message.end_date = dependency_2.google.type.v1.Date.fromObject(data.end_date);
            }
            if (data.work_address != null) {
                message.work_address = Address.fromObject(data.work_address);
            }
            if (data.work_phone_number != null) {
                message.work_phone_number = data.work_phone_number;
            }
            if (data.phone_number != null) {
                message.phone_number = dependency_5.thebaasco.types.v1.PhoneNumber.fromObject(data.phone_number);
            }
            return message;
        }
        toObject() {
            const data: {
                employment_status?: string;
                employer_name?: string;
                industry?: string;
                occupation?: string;
                start_date?: ReturnType<typeof dependency_2.google.type.v1.Date.prototype.toObject>;
                end_date?: ReturnType<typeof dependency_2.google.type.v1.Date.prototype.toObject>;
                work_address?: ReturnType<typeof Address.prototype.toObject>;
                work_phone_number?: string;
                phone_number?: ReturnType<typeof dependency_5.thebaasco.types.v1.PhoneNumber.prototype.toObject>;
            } = {};
            if (this.employment_status != null) {
                data.employment_status = this.employment_status;
            }
            if (this.employer_name != null) {
                data.employer_name = this.employer_name;
            }
            if (this.industry != null) {
                data.industry = this.industry;
            }
            if (this.occupation != null) {
                data.occupation = this.occupation;
            }
            if (this.start_date != null) {
                data.start_date = this.start_date.toObject();
            }
            if (this.end_date != null) {
                data.end_date = this.end_date.toObject();
            }
            if (this.work_address != null) {
                data.work_address = this.work_address.toObject();
            }
            if (this.work_phone_number != null) {
                data.work_phone_number = this.work_phone_number;
            }
            if (this.phone_number != null) {
                data.phone_number = this.phone_number.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.employment_status === "string" && this.employment_status.length)
                writer.writeString(1, this.employment_status);
            if (typeof this.employer_name === "string" && this.employer_name.length)
                writer.writeString(2, this.employer_name);
            if (typeof this.industry === "string" && this.industry.length)
                writer.writeString(3, this.industry);
            if (typeof this.occupation === "string" && this.occupation.length)
                writer.writeString(4, this.occupation);
            if (this.start_date !== undefined)
                writer.writeMessage(5, this.start_date, () => this.start_date.serialize(writer));
            if (this.end_date !== undefined)
                writer.writeMessage(6, this.end_date, () => this.end_date.serialize(writer));
            if (this.work_address !== undefined)
                writer.writeMessage(7, this.work_address, () => this.work_address.serialize(writer));
            if (typeof this.work_phone_number === "string" && this.work_phone_number.length)
                writer.writeString(8, this.work_phone_number);
            if (this.phone_number !== undefined)
                writer.writeMessage(9, this.phone_number, () => this.phone_number.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Employment {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Employment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.employment_status = reader.readString();
                        break;
                    case 2:
                        message.employer_name = reader.readString();
                        break;
                    case 3:
                        message.industry = reader.readString();
                        break;
                    case 4:
                        message.occupation = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.start_date, () => message.start_date = dependency_2.google.type.v1.Date.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.end_date, () => message.end_date = dependency_2.google.type.v1.Date.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.work_address, () => message.work_address = Address.deserialize(reader));
                        break;
                    case 8:
                        message.work_phone_number = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.phone_number, () => message.phone_number = dependency_5.thebaasco.types.v1.PhoneNumber.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Employment {
            return Employment.deserialize(bytes);
        }
    }
    export class CustomerResidency extends pb_1.Message {
        constructor(data?: any[] | {
            is_canadian_tax_resident?: boolean;
            other_residences?: OtherResidence[];
            sin_token?: string;
            citizenship?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_canadian_tax_resident" in data && data.is_canadian_tax_resident != undefined) {
                    this.is_canadian_tax_resident = data.is_canadian_tax_resident;
                }
                if ("other_residences" in data && data.other_residences != undefined) {
                    this.other_residences = data.other_residences;
                }
                if ("sin_token" in data && data.sin_token != undefined) {
                    this.sin_token = data.sin_token;
                }
                if ("citizenship" in data && data.citizenship != undefined) {
                    this.citizenship = data.citizenship;
                }
            }
        }
        get is_canadian_tax_resident() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set is_canadian_tax_resident(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get other_residences() {
            return pb_1.Message.getRepeatedWrapperField(this, OtherResidence, 2) as OtherResidence[];
        }
        set other_residences(value: OtherResidence[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get sin_token() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set sin_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get citizenship() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set citizenship(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            is_canadian_tax_resident?: boolean;
            other_residences?: ReturnType<typeof OtherResidence.prototype.toObject>[];
            sin_token?: string;
            citizenship?: string;
        }) {
            const message = new CustomerResidency({});
            if (data.is_canadian_tax_resident != null) {
                message.is_canadian_tax_resident = data.is_canadian_tax_resident;
            }
            if (data.other_residences != null) {
                message.other_residences = data.other_residences.map(item => OtherResidence.fromObject(item));
            }
            if (data.sin_token != null) {
                message.sin_token = data.sin_token;
            }
            if (data.citizenship != null) {
                message.citizenship = data.citizenship;
            }
            return message;
        }
        toObject() {
            const data: {
                is_canadian_tax_resident?: boolean;
                other_residences?: ReturnType<typeof OtherResidence.prototype.toObject>[];
                sin_token?: string;
                citizenship?: string;
            } = {};
            if (this.is_canadian_tax_resident != null) {
                data.is_canadian_tax_resident = this.is_canadian_tax_resident;
            }
            if (this.other_residences != null) {
                data.other_residences = this.other_residences.map((item: OtherResidence) => item.toObject());
            }
            if (this.sin_token != null) {
                data.sin_token = this.sin_token;
            }
            if (this.citizenship != null) {
                data.citizenship = this.citizenship;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_canadian_tax_resident !== undefined)
                writer.writeBool(1, this.is_canadian_tax_resident);
            if (this.other_residences !== undefined)
                writer.writeRepeatedMessage(2, this.other_residences, (item: OtherResidence) => item.serialize(writer));
            if (typeof this.sin_token === "string" && this.sin_token.length)
                writer.writeString(3, this.sin_token);
            if (typeof this.citizenship === "string" && this.citizenship.length)
                writer.writeString(4, this.citizenship);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerResidency {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerResidency();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_canadian_tax_resident = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.other_residences, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OtherResidence.deserialize(reader), OtherResidence));
                        break;
                    case 3:
                        message.sin_token = reader.readString();
                        break;
                    case 4:
                        message.citizenship = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerResidency {
            return CustomerResidency.deserialize(bytes);
        }
    }
    export class OtherResidence extends pb_1.Message {
        constructor(data?: any[] | {
            other_residence_country?: string;
            tin_token?: string;
            citizenship?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("other_residence_country" in data && data.other_residence_country != undefined) {
                    this.other_residence_country = data.other_residence_country;
                }
                if ("tin_token" in data && data.tin_token != undefined) {
                    this.tin_token = data.tin_token;
                }
                if ("citizenship" in data && data.citizenship != undefined) {
                    this.citizenship = data.citizenship;
                }
            }
        }
        get other_residence_country() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set other_residence_country(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tin_token() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set tin_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get citizenship() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set citizenship(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            other_residence_country?: string;
            tin_token?: string;
            citizenship?: string;
        }) {
            const message = new OtherResidence({});
            if (data.other_residence_country != null) {
                message.other_residence_country = data.other_residence_country;
            }
            if (data.tin_token != null) {
                message.tin_token = data.tin_token;
            }
            if (data.citizenship != null) {
                message.citizenship = data.citizenship;
            }
            return message;
        }
        toObject() {
            const data: {
                other_residence_country?: string;
                tin_token?: string;
                citizenship?: string;
            } = {};
            if (this.other_residence_country != null) {
                data.other_residence_country = this.other_residence_country;
            }
            if (this.tin_token != null) {
                data.tin_token = this.tin_token;
            }
            if (this.citizenship != null) {
                data.citizenship = this.citizenship;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.other_residence_country === "string" && this.other_residence_country.length)
                writer.writeString(1, this.other_residence_country);
            if (typeof this.tin_token === "string" && this.tin_token.length)
                writer.writeString(2, this.tin_token);
            if (typeof this.citizenship === "string" && this.citizenship.length)
                writer.writeString(3, this.citizenship);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OtherResidence {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OtherResidence();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.other_residence_country = reader.readString();
                        break;
                    case 2:
                        message.tin_token = reader.readString();
                        break;
                    case 3:
                        message.citizenship = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OtherResidence {
            return OtherResidence.deserialize(bytes);
        }
    }
    export class Consent extends pb_1.Message {
        constructor(data?: any[] | {
            consent_type?: string;
            consent_timestamp?: dependency_1.google.protobuf.Timestamp;
            document_name_and_version?: string;
            view_timestamp?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consent_type" in data && data.consent_type != undefined) {
                    this.consent_type = data.consent_type;
                }
                if ("consent_timestamp" in data && data.consent_timestamp != undefined) {
                    this.consent_timestamp = data.consent_timestamp;
                }
                if ("document_name_and_version" in data && data.document_name_and_version != undefined) {
                    this.document_name_and_version = data.document_name_and_version;
                }
                if ("view_timestamp" in data && data.view_timestamp != undefined) {
                    this.view_timestamp = data.view_timestamp;
                }
            }
        }
        get consent_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set consent_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get consent_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set consent_timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get document_name_and_version() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set document_name_and_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get view_timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set view_timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        static fromObject(data: {
            consent_type?: string;
            consent_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            document_name_and_version?: string;
            view_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }) {
            const message = new Consent({});
            if (data.consent_type != null) {
                message.consent_type = data.consent_type;
            }
            if (data.consent_timestamp != null) {
                message.consent_timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.consent_timestamp);
            }
            if (data.document_name_and_version != null) {
                message.document_name_and_version = data.document_name_and_version;
            }
            if (data.view_timestamp != null) {
                message.view_timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.view_timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                consent_type?: string;
                consent_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                document_name_and_version?: string;
                view_timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.consent_type != null) {
                data.consent_type = this.consent_type;
            }
            if (this.consent_timestamp != null) {
                data.consent_timestamp = this.consent_timestamp.toObject();
            }
            if (this.document_name_and_version != null) {
                data.document_name_and_version = this.document_name_and_version;
            }
            if (this.view_timestamp != null) {
                data.view_timestamp = this.view_timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.consent_type === "string" && this.consent_type.length)
                writer.writeString(1, this.consent_type);
            if (this.consent_timestamp !== undefined)
                writer.writeMessage(2, this.consent_timestamp, () => this.consent_timestamp.serialize(writer));
            if (typeof this.document_name_and_version === "string" && this.document_name_and_version.length)
                writer.writeString(3, this.document_name_and_version);
            if (this.view_timestamp !== undefined)
                writer.writeMessage(4, this.view_timestamp, () => this.view_timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Consent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Consent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consent_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.consent_timestamp, () => message.consent_timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.document_name_and_version = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.view_timestamp, () => message.view_timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Consent {
            return Consent.deserialize(bytes);
        }
    }
    export class Disclosure extends pb_1.Message {
        constructor(data?: any[] | {
            disclosure_type?: string;
            timestamp?: dependency_1.google.protobuf.Timestamp;
            document_name_and_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("disclosure_type" in data && data.disclosure_type != undefined) {
                    this.disclosure_type = data.disclosure_type;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("document_name_and_version" in data && data.document_name_and_version != undefined) {
                    this.document_name_and_version = data.document_name_and_version;
                }
            }
        }
        get disclosure_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set disclosure_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get document_name_and_version() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set document_name_and_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            disclosure_type?: string;
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            document_name_and_version?: string;
        }) {
            const message = new Disclosure({});
            if (data.disclosure_type != null) {
                message.disclosure_type = data.disclosure_type;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.document_name_and_version != null) {
                message.document_name_and_version = data.document_name_and_version;
            }
            return message;
        }
        toObject() {
            const data: {
                disclosure_type?: string;
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                document_name_and_version?: string;
            } = {};
            if (this.disclosure_type != null) {
                data.disclosure_type = this.disclosure_type;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.document_name_and_version != null) {
                data.document_name_and_version = this.document_name_and_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.disclosure_type === "string" && this.disclosure_type.length)
                writer.writeString(1, this.disclosure_type);
            if (this.timestamp !== undefined)
                writer.writeMessage(2, this.timestamp, () => this.timestamp.serialize(writer));
            if (typeof this.document_name_and_version === "string" && this.document_name_and_version.length)
                writer.writeString(3, this.document_name_and_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Disclosure {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Disclosure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.disclosure_type = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.document_name_and_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Disclosure {
            return Disclosure.deserialize(bytes);
        }
    }
    export class PersonalDetails extends pb_1.Message {
        constructor(data?: any[] | {
            first_name?: string;
            middle_name?: string;
            last_name?: string;
            date_of_birth?: dependency_2.google.type.v1.Date;
            alias?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("middle_name" in data && data.middle_name != undefined) {
                    this.middle_name = data.middle_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("date_of_birth" in data && data.date_of_birth != undefined) {
                    this.date_of_birth = data.date_of_birth;
                }
                if ("alias" in data && data.alias != undefined) {
                    this.alias = data.alias;
                }
            }
        }
        get first_name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get middle_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set middle_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get date_of_birth() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.type.v1.Date, 4) as dependency_2.google.type.v1.Date;
        }
        set date_of_birth(value: dependency_2.google.type.v1.Date) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get alias() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set alias(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            first_name?: string;
            middle_name?: string;
            last_name?: string;
            date_of_birth?: ReturnType<typeof dependency_2.google.type.v1.Date.prototype.toObject>;
            alias?: string;
        }) {
            const message = new PersonalDetails({});
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.middle_name != null) {
                message.middle_name = data.middle_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.date_of_birth != null) {
                message.date_of_birth = dependency_2.google.type.v1.Date.fromObject(data.date_of_birth);
            }
            if (data.alias != null) {
                message.alias = data.alias;
            }
            return message;
        }
        toObject() {
            const data: {
                first_name?: string;
                middle_name?: string;
                last_name?: string;
                date_of_birth?: ReturnType<typeof dependency_2.google.type.v1.Date.prototype.toObject>;
                alias?: string;
            } = {};
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.middle_name != null) {
                data.middle_name = this.middle_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.date_of_birth != null) {
                data.date_of_birth = this.date_of_birth.toObject();
            }
            if (this.alias != null) {
                data.alias = this.alias;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.first_name === "string" && this.first_name.length)
                writer.writeString(1, this.first_name);
            if (typeof this.middle_name === "string" && this.middle_name.length)
                writer.writeString(2, this.middle_name);
            if (typeof this.last_name === "string" && this.last_name.length)
                writer.writeString(3, this.last_name);
            if (this.date_of_birth !== undefined)
                writer.writeMessage(4, this.date_of_birth, () => this.date_of_birth.serialize(writer));
            if (typeof this.alias === "string" && this.alias.length)
                writer.writeString(5, this.alias);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PersonalDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PersonalDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.first_name = reader.readString();
                        break;
                    case 2:
                        message.middle_name = reader.readString();
                        break;
                    case 3:
                        message.last_name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.date_of_birth, () => message.date_of_birth = dependency_2.google.type.v1.Date.deserialize(reader));
                        break;
                    case 5:
                        message.alias = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PersonalDetails {
            return PersonalDetails.deserialize(bytes);
        }
    }
    export class AccountUsageDetails extends pb_1.Message {
        constructor(data?: any[] | {
            account_purpose?: string;
            primary_source_of_funds?: string[];
            authorized_third_party_usage?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_purpose" in data && data.account_purpose != undefined) {
                    this.account_purpose = data.account_purpose;
                }
                if ("primary_source_of_funds" in data && data.primary_source_of_funds != undefined) {
                    this.primary_source_of_funds = data.primary_source_of_funds;
                }
                if ("authorized_third_party_usage" in data && data.authorized_third_party_usage != undefined) {
                    this.authorized_third_party_usage = data.authorized_third_party_usage;
                }
            }
        }
        get account_purpose() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set account_purpose(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get primary_source_of_funds() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set primary_source_of_funds(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get authorized_third_party_usage() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set authorized_third_party_usage(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            account_purpose?: string;
            primary_source_of_funds?: string[];
            authorized_third_party_usage?: boolean;
        }) {
            const message = new AccountUsageDetails({});
            if (data.account_purpose != null) {
                message.account_purpose = data.account_purpose;
            }
            if (data.primary_source_of_funds != null) {
                message.primary_source_of_funds = data.primary_source_of_funds;
            }
            if (data.authorized_third_party_usage != null) {
                message.authorized_third_party_usage = data.authorized_third_party_usage;
            }
            return message;
        }
        toObject() {
            const data: {
                account_purpose?: string;
                primary_source_of_funds?: string[];
                authorized_third_party_usage?: boolean;
            } = {};
            if (this.account_purpose != null) {
                data.account_purpose = this.account_purpose;
            }
            if (this.primary_source_of_funds != null) {
                data.primary_source_of_funds = this.primary_source_of_funds;
            }
            if (this.authorized_third_party_usage != null) {
                data.authorized_third_party_usage = this.authorized_third_party_usage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.account_purpose === "string" && this.account_purpose.length)
                writer.writeString(1, this.account_purpose);
            if (this.primary_source_of_funds !== undefined)
                writer.writeRepeatedString(2, this.primary_source_of_funds);
            if (this.authorized_third_party_usage !== undefined)
                writer.writeBool(3, this.authorized_third_party_usage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountUsageDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountUsageDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_purpose = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.authorized_third_party_usage = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountUsageDetails {
            return AccountUsageDetails.deserialize(bytes);
        }
    }
    export class ContactDetails extends pb_1.Message {
        constructor(data?: any[] | {
            phone_number?: string;
            customer_email?: string;
            contact_phone_number?: dependency_5.thebaasco.types.v1.PhoneNumber;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("phone_number" in data && data.phone_number != undefined) {
                    this.phone_number = data.phone_number;
                }
                if ("customer_email" in data && data.customer_email != undefined) {
                    this.customer_email = data.customer_email;
                }
                if ("contact_phone_number" in data && data.contact_phone_number != undefined) {
                    this.contact_phone_number = data.contact_phone_number;
                }
            }
        }
        get phone_number() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set phone_number(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_email() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set customer_email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get contact_phone_number() {
            return pb_1.Message.getWrapperField(this, dependency_5.thebaasco.types.v1.PhoneNumber, 5) as dependency_5.thebaasco.types.v1.PhoneNumber;
        }
        set contact_phone_number(value: dependency_5.thebaasco.types.v1.PhoneNumber) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        static fromObject(data: {
            phone_number?: string;
            customer_email?: string;
            contact_phone_number?: ReturnType<typeof dependency_5.thebaasco.types.v1.PhoneNumber.prototype.toObject>;
        }) {
            const message = new ContactDetails({});
            if (data.phone_number != null) {
                message.phone_number = data.phone_number;
            }
            if (data.customer_email != null) {
                message.customer_email = data.customer_email;
            }
            if (data.contact_phone_number != null) {
                message.contact_phone_number = dependency_5.thebaasco.types.v1.PhoneNumber.fromObject(data.contact_phone_number);
            }
            return message;
        }
        toObject() {
            const data: {
                phone_number?: string;
                customer_email?: string;
                contact_phone_number?: ReturnType<typeof dependency_5.thebaasco.types.v1.PhoneNumber.prototype.toObject>;
            } = {};
            if (this.phone_number != null) {
                data.phone_number = this.phone_number;
            }
            if (this.customer_email != null) {
                data.customer_email = this.customer_email;
            }
            if (this.contact_phone_number != null) {
                data.contact_phone_number = this.contact_phone_number.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.phone_number === "string" && this.phone_number.length)
                writer.writeString(1, this.phone_number);
            if (typeof this.customer_email === "string" && this.customer_email.length)
                writer.writeString(2, this.customer_email);
            if (this.contact_phone_number !== undefined)
                writer.writeMessage(5, this.contact_phone_number, () => this.contact_phone_number.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.phone_number = reader.readString();
                        break;
                    case 2:
                        message.customer_email = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.contact_phone_number, () => message.contact_phone_number = dependency_5.thebaasco.types.v1.PhoneNumber.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContactDetails {
            return ContactDetails.deserialize(bytes);
        }
    }
    export class CommunicationPreferenceDetails extends pb_1.Message {
        constructor(data?: any[] | {
            customer_communication_language?: string;
            customer_communication_pref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customer_communication_language" in data && data.customer_communication_language != undefined) {
                    this.customer_communication_language = data.customer_communication_language;
                }
                if ("customer_communication_pref" in data && data.customer_communication_pref != undefined) {
                    this.customer_communication_pref = data.customer_communication_pref;
                }
            }
        }
        get customer_communication_language() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set customer_communication_language(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_communication_pref() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set customer_communication_pref(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            customer_communication_language?: string;
            customer_communication_pref?: string;
        }) {
            const message = new CommunicationPreferenceDetails({});
            if (data.customer_communication_language != null) {
                message.customer_communication_language = data.customer_communication_language;
            }
            if (data.customer_communication_pref != null) {
                message.customer_communication_pref = data.customer_communication_pref;
            }
            return message;
        }
        toObject() {
            const data: {
                customer_communication_language?: string;
                customer_communication_pref?: string;
            } = {};
            if (this.customer_communication_language != null) {
                data.customer_communication_language = this.customer_communication_language;
            }
            if (this.customer_communication_pref != null) {
                data.customer_communication_pref = this.customer_communication_pref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.customer_communication_language === "string" && this.customer_communication_language.length)
                writer.writeString(1, this.customer_communication_language);
            if (typeof this.customer_communication_pref === "string" && this.customer_communication_pref.length)
                writer.writeString(2, this.customer_communication_pref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommunicationPreferenceDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommunicationPreferenceDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customer_communication_language = reader.readString();
                        break;
                    case 2:
                        message.customer_communication_pref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommunicationPreferenceDetails {
            return CommunicationPreferenceDetails.deserialize(bytes);
        }
    }
    export class OnboardingApplication extends pb_1.Message {
        constructor(data?: any[] | {
            application_id?: string;
            customer_id?: string;
            bundle_id?: string;
            status?: string;
            customer_personal_details?: PersonalDetails;
            customer_contact_details?: ContactDetails;
            account_details?: AccountUsageDetails;
            customer_employment?: Employment[];
            customer_residency?: CustomerResidency;
            consents?: Consent[];
            disclosures?: Disclosure[];
            customer_residence_address?: Address[];
            customer_identification_documents?: DocumentInfo[];
            customer_communication_preference?: CommunicationPreferenceDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 10, 11, 12, 13], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("application_id" in data && data.application_id != undefined) {
                    this.application_id = data.application_id;
                }
                if ("customer_id" in data && data.customer_id != undefined) {
                    this.customer_id = data.customer_id;
                }
                if ("bundle_id" in data && data.bundle_id != undefined) {
                    this.bundle_id = data.bundle_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("customer_personal_details" in data && data.customer_personal_details != undefined) {
                    this.customer_personal_details = data.customer_personal_details;
                }
                if ("customer_contact_details" in data && data.customer_contact_details != undefined) {
                    this.customer_contact_details = data.customer_contact_details;
                }
                if ("account_details" in data && data.account_details != undefined) {
                    this.account_details = data.account_details;
                }
                if ("customer_employment" in data && data.customer_employment != undefined) {
                    this.customer_employment = data.customer_employment;
                }
                if ("customer_residency" in data && data.customer_residency != undefined) {
                    this.customer_residency = data.customer_residency;
                }
                if ("consents" in data && data.consents != undefined) {
                    this.consents = data.consents;
                }
                if ("disclosures" in data && data.disclosures != undefined) {
                    this.disclosures = data.disclosures;
                }
                if ("customer_residence_address" in data && data.customer_residence_address != undefined) {
                    this.customer_residence_address = data.customer_residence_address;
                }
                if ("customer_identification_documents" in data && data.customer_identification_documents != undefined) {
                    this.customer_identification_documents = data.customer_identification_documents;
                }
                if ("customer_communication_preference" in data && data.customer_communication_preference != undefined) {
                    this.customer_communication_preference = data.customer_communication_preference;
                }
            }
        }
        get application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set customer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get bundle_id() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set bundle_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get customer_personal_details() {
            return pb_1.Message.getWrapperField(this, PersonalDetails, 5) as PersonalDetails;
        }
        set customer_personal_details(value: PersonalDetails) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get customer_contact_details() {
            return pb_1.Message.getWrapperField(this, ContactDetails, 6) as ContactDetails;
        }
        set customer_contact_details(value: ContactDetails) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get account_details() {
            return pb_1.Message.getWrapperField(this, AccountUsageDetails, 7) as AccountUsageDetails;
        }
        set account_details(value: AccountUsageDetails) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get customer_employment() {
            return pb_1.Message.getRepeatedWrapperField(this, Employment, 8) as Employment[];
        }
        set customer_employment(value: Employment[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get customer_residency() {
            return pb_1.Message.getWrapperField(this, CustomerResidency, 9) as CustomerResidency;
        }
        set customer_residency(value: CustomerResidency) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get consents() {
            return pb_1.Message.getRepeatedWrapperField(this, Consent, 10) as Consent[];
        }
        set consents(value: Consent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get disclosures() {
            return pb_1.Message.getRepeatedWrapperField(this, Disclosure, 11) as Disclosure[];
        }
        set disclosures(value: Disclosure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get customer_residence_address() {
            return pb_1.Message.getRepeatedWrapperField(this, Address, 12) as Address[];
        }
        set customer_residence_address(value: Address[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get customer_identification_documents() {
            return pb_1.Message.getRepeatedWrapperField(this, DocumentInfo, 13) as DocumentInfo[];
        }
        set customer_identification_documents(value: DocumentInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get customer_communication_preference() {
            return pb_1.Message.getWrapperField(this, CommunicationPreferenceDetails, 15) as CommunicationPreferenceDetails;
        }
        set customer_communication_preference(value: CommunicationPreferenceDetails) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        static fromObject(data: {
            application_id?: string;
            customer_id?: string;
            bundle_id?: string;
            status?: string;
            customer_personal_details?: ReturnType<typeof PersonalDetails.prototype.toObject>;
            customer_contact_details?: ReturnType<typeof ContactDetails.prototype.toObject>;
            account_details?: ReturnType<typeof AccountUsageDetails.prototype.toObject>;
            customer_employment?: ReturnType<typeof Employment.prototype.toObject>[];
            customer_residency?: ReturnType<typeof CustomerResidency.prototype.toObject>;
            consents?: ReturnType<typeof Consent.prototype.toObject>[];
            disclosures?: ReturnType<typeof Disclosure.prototype.toObject>[];
            customer_residence_address?: ReturnType<typeof Address.prototype.toObject>[];
            customer_identification_documents?: ReturnType<typeof DocumentInfo.prototype.toObject>[];
            customer_communication_preference?: ReturnType<typeof CommunicationPreferenceDetails.prototype.toObject>;
        }) {
            const message = new OnboardingApplication({});
            if (data.application_id != null) {
                message.application_id = data.application_id;
            }
            if (data.customer_id != null) {
                message.customer_id = data.customer_id;
            }
            if (data.bundle_id != null) {
                message.bundle_id = data.bundle_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.customer_personal_details != null) {
                message.customer_personal_details = PersonalDetails.fromObject(data.customer_personal_details);
            }
            if (data.customer_contact_details != null) {
                message.customer_contact_details = ContactDetails.fromObject(data.customer_contact_details);
            }
            if (data.account_details != null) {
                message.account_details = AccountUsageDetails.fromObject(data.account_details);
            }
            if (data.customer_employment != null) {
                message.customer_employment = data.customer_employment.map(item => Employment.fromObject(item));
            }
            if (data.customer_residency != null) {
                message.customer_residency = CustomerResidency.fromObject(data.customer_residency);
            }
            if (data.consents != null) {
                message.consents = data.consents.map(item => Consent.fromObject(item));
            }
            if (data.disclosures != null) {
                message.disclosures = data.disclosures.map(item => Disclosure.fromObject(item));
            }
            if (data.customer_residence_address != null) {
                message.customer_residence_address = data.customer_residence_address.map(item => Address.fromObject(item));
            }
            if (data.customer_identification_documents != null) {
                message.customer_identification_documents = data.customer_identification_documents.map(item => DocumentInfo.fromObject(item));
            }
            if (data.customer_communication_preference != null) {
                message.customer_communication_preference = CommunicationPreferenceDetails.fromObject(data.customer_communication_preference);
            }
            return message;
        }
        toObject() {
            const data: {
                application_id?: string;
                customer_id?: string;
                bundle_id?: string;
                status?: string;
                customer_personal_details?: ReturnType<typeof PersonalDetails.prototype.toObject>;
                customer_contact_details?: ReturnType<typeof ContactDetails.prototype.toObject>;
                account_details?: ReturnType<typeof AccountUsageDetails.prototype.toObject>;
                customer_employment?: ReturnType<typeof Employment.prototype.toObject>[];
                customer_residency?: ReturnType<typeof CustomerResidency.prototype.toObject>;
                consents?: ReturnType<typeof Consent.prototype.toObject>[];
                disclosures?: ReturnType<typeof Disclosure.prototype.toObject>[];
                customer_residence_address?: ReturnType<typeof Address.prototype.toObject>[];
                customer_identification_documents?: ReturnType<typeof DocumentInfo.prototype.toObject>[];
                customer_communication_preference?: ReturnType<typeof CommunicationPreferenceDetails.prototype.toObject>;
            } = {};
            if (this.application_id != null) {
                data.application_id = this.application_id;
            }
            if (this.customer_id != null) {
                data.customer_id = this.customer_id;
            }
            if (this.bundle_id != null) {
                data.bundle_id = this.bundle_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.customer_personal_details != null) {
                data.customer_personal_details = this.customer_personal_details.toObject();
            }
            if (this.customer_contact_details != null) {
                data.customer_contact_details = this.customer_contact_details.toObject();
            }
            if (this.account_details != null) {
                data.account_details = this.account_details.toObject();
            }
            if (this.customer_employment != null) {
                data.customer_employment = this.customer_employment.map((item: Employment) => item.toObject());
            }
            if (this.customer_residency != null) {
                data.customer_residency = this.customer_residency.toObject();
            }
            if (this.consents != null) {
                data.consents = this.consents.map((item: Consent) => item.toObject());
            }
            if (this.disclosures != null) {
                data.disclosures = this.disclosures.map((item: Disclosure) => item.toObject());
            }
            if (this.customer_residence_address != null) {
                data.customer_residence_address = this.customer_residence_address.map((item: Address) => item.toObject());
            }
            if (this.customer_identification_documents != null) {
                data.customer_identification_documents = this.customer_identification_documents.map((item: DocumentInfo) => item.toObject());
            }
            if (this.customer_communication_preference != null) {
                data.customer_communication_preference = this.customer_communication_preference.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.application_id === "string" && this.application_id.length)
                writer.writeString(1, this.application_id);
            if (typeof this.customer_id === "string" && this.customer_id.length)
                writer.writeString(2, this.customer_id);
            if (typeof this.bundle_id === "string" && this.bundle_id.length)
                writer.writeString(3, this.bundle_id);
            if (typeof this.status === "string" && this.status.length)
                writer.writeString(4, this.status);
            if (this.customer_personal_details !== undefined)
                writer.writeMessage(5, this.customer_personal_details, () => this.customer_personal_details.serialize(writer));
            if (this.customer_contact_details !== undefined)
                writer.writeMessage(6, this.customer_contact_details, () => this.customer_contact_details.serialize(writer));
            if (this.account_details !== undefined)
                writer.writeMessage(7, this.account_details, () => this.account_details.serialize(writer));
            if (this.customer_employment !== undefined)
                writer.writeRepeatedMessage(8, this.customer_employment, (item: Employment) => item.serialize(writer));
            if (this.customer_residency !== undefined)
                writer.writeMessage(9, this.customer_residency, () => this.customer_residency.serialize(writer));
            if (this.consents !== undefined)
                writer.writeRepeatedMessage(10, this.consents, (item: Consent) => item.serialize(writer));
            if (this.disclosures !== undefined)
                writer.writeRepeatedMessage(11, this.disclosures, (item: Disclosure) => item.serialize(writer));
            if (this.customer_residence_address !== undefined)
                writer.writeRepeatedMessage(12, this.customer_residence_address, (item: Address) => item.serialize(writer));
            if (this.customer_identification_documents !== undefined)
                writer.writeRepeatedMessage(13, this.customer_identification_documents, (item: DocumentInfo) => item.serialize(writer));
            if (this.customer_communication_preference !== undefined)
                writer.writeMessage(15, this.customer_communication_preference, () => this.customer_communication_preference.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardingApplication {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardingApplication();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.application_id = reader.readString();
                        break;
                    case 2:
                        message.customer_id = reader.readString();
                        break;
                    case 3:
                        message.bundle_id = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.customer_personal_details, () => message.customer_personal_details = PersonalDetails.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.customer_contact_details, () => message.customer_contact_details = ContactDetails.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.account_details, () => message.account_details = AccountUsageDetails.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.customer_employment, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Employment.deserialize(reader), Employment));
                        break;
                    case 9:
                        reader.readMessage(message.customer_residency, () => message.customer_residency = CustomerResidency.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.consents, () => pb_1.Message.addToRepeatedWrapperField(message, 10, Consent.deserialize(reader), Consent));
                        break;
                    case 11:
                        reader.readMessage(message.disclosures, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Disclosure.deserialize(reader), Disclosure));
                        break;
                    case 12:
                        reader.readMessage(message.customer_residence_address, () => pb_1.Message.addToRepeatedWrapperField(message, 12, Address.deserialize(reader), Address));
                        break;
                    case 13:
                        reader.readMessage(message.customer_identification_documents, () => pb_1.Message.addToRepeatedWrapperField(message, 13, DocumentInfo.deserialize(reader), DocumentInfo));
                        break;
                    case 15:
                        reader.readMessage(message.customer_communication_preference, () => message.customer_communication_preference = CommunicationPreferenceDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardingApplication {
            return OnboardingApplication.deserialize(bytes);
        }
    }
    export class DocumentInfo extends pb_1.Message {
        constructor(data?: any[] | {
            document_type?: string;
            document_country?: string;
            front_image_file_name?: string;
            back_image_file_name?: string;
            document_state?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("document_type" in data && data.document_type != undefined) {
                    this.document_type = data.document_type;
                }
                if ("document_country" in data && data.document_country != undefined) {
                    this.document_country = data.document_country;
                }
                if ("front_image_file_name" in data && data.front_image_file_name != undefined) {
                    this.front_image_file_name = data.front_image_file_name;
                }
                if ("back_image_file_name" in data && data.back_image_file_name != undefined) {
                    this.back_image_file_name = data.back_image_file_name;
                }
                if ("document_state" in data && data.document_state != undefined) {
                    this.document_state = data.document_state;
                }
            }
        }
        get document_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set document_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document_country() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set document_country(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get front_image_file_name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set front_image_file_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get back_image_file_name() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set back_image_file_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get document_state() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set document_state(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            document_type?: string;
            document_country?: string;
            front_image_file_name?: string;
            back_image_file_name?: string;
            document_state?: string;
        }) {
            const message = new DocumentInfo({});
            if (data.document_type != null) {
                message.document_type = data.document_type;
            }
            if (data.document_country != null) {
                message.document_country = data.document_country;
            }
            if (data.front_image_file_name != null) {
                message.front_image_file_name = data.front_image_file_name;
            }
            if (data.back_image_file_name != null) {
                message.back_image_file_name = data.back_image_file_name;
            }
            if (data.document_state != null) {
                message.document_state = data.document_state;
            }
            return message;
        }
        toObject() {
            const data: {
                document_type?: string;
                document_country?: string;
                front_image_file_name?: string;
                back_image_file_name?: string;
                document_state?: string;
            } = {};
            if (this.document_type != null) {
                data.document_type = this.document_type;
            }
            if (this.document_country != null) {
                data.document_country = this.document_country;
            }
            if (this.front_image_file_name != null) {
                data.front_image_file_name = this.front_image_file_name;
            }
            if (this.back_image_file_name != null) {
                data.back_image_file_name = this.back_image_file_name;
            }
            if (this.document_state != null) {
                data.document_state = this.document_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.document_type === "string" && this.document_type.length)
                writer.writeString(1, this.document_type);
            if (typeof this.document_country === "string" && this.document_country.length)
                writer.writeString(2, this.document_country);
            if (typeof this.front_image_file_name === "string" && this.front_image_file_name.length)
                writer.writeString(3, this.front_image_file_name);
            if (typeof this.back_image_file_name === "string" && this.back_image_file_name.length)
                writer.writeString(4, this.back_image_file_name);
            if (typeof this.document_state === "string" && this.document_state.length)
                writer.writeString(5, this.document_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.document_type = reader.readString();
                        break;
                    case 2:
                        message.document_country = reader.readString();
                        break;
                    case 3:
                        message.front_image_file_name = reader.readString();
                        break;
                    case 4:
                        message.back_image_file_name = reader.readString();
                        break;
                    case 5:
                        message.document_state = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DocumentInfo {
            return DocumentInfo.deserialize(bytes);
        }
    }
    export class OnboardingOperationResponseDetails extends pb_1.Message {
        constructor(data?: any[] | {
            application_id?: string;
            onboarding_application_status?: string;
            request_status?: string;
            /** @deprecated*/
            request_status_reason?: string;
            is_retry_operation_restricted?: boolean;
            remaining_allowed_retries?: number;
            failure_status_codes?: string[];
            verification_needed?: OnboardingVerification[];
            consents?: TermsAndConditions[];
            disclosures?: TermsAndConditions[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 8, 9, 10], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("application_id" in data && data.application_id != undefined) {
                    this.application_id = data.application_id;
                }
                if ("onboarding_application_status" in data && data.onboarding_application_status != undefined) {
                    this.onboarding_application_status = data.onboarding_application_status;
                }
                if ("request_status" in data && data.request_status != undefined) {
                    this.request_status = data.request_status;
                }
                if ("request_status_reason" in data && data.request_status_reason != undefined) {
                    this.request_status_reason = data.request_status_reason;
                }
                if ("is_retry_operation_restricted" in data && data.is_retry_operation_restricted != undefined) {
                    this.is_retry_operation_restricted = data.is_retry_operation_restricted;
                }
                if ("remaining_allowed_retries" in data && data.remaining_allowed_retries != undefined) {
                    this.remaining_allowed_retries = data.remaining_allowed_retries;
                }
                if ("failure_status_codes" in data && data.failure_status_codes != undefined) {
                    this.failure_status_codes = data.failure_status_codes;
                }
                if ("verification_needed" in data && data.verification_needed != undefined) {
                    this.verification_needed = data.verification_needed;
                }
                if ("consents" in data && data.consents != undefined) {
                    this.consents = data.consents;
                }
                if ("disclosures" in data && data.disclosures != undefined) {
                    this.disclosures = data.disclosures;
                }
            }
        }
        get application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get onboarding_application_status() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set onboarding_application_status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get request_status() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set request_status(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        /** @deprecated*/
        get request_status_reason() {
            return pb_1.Message.getField(this, 4) as string;
        }
        /** @deprecated*/
        set request_status_reason(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_retry_operation_restricted() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set is_retry_operation_restricted(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get remaining_allowed_retries() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set remaining_allowed_retries(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get failure_status_codes() {
            return pb_1.Message.getField(this, 7) as string[];
        }
        set failure_status_codes(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get verification_needed() {
            return pb_1.Message.getRepeatedWrapperField(this, OnboardingVerification, 8) as OnboardingVerification[];
        }
        set verification_needed(value: OnboardingVerification[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get consents() {
            return pb_1.Message.getRepeatedWrapperField(this, TermsAndConditions, 9) as TermsAndConditions[];
        }
        set consents(value: TermsAndConditions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get disclosures() {
            return pb_1.Message.getRepeatedWrapperField(this, TermsAndConditions, 10) as TermsAndConditions[];
        }
        set disclosures(value: TermsAndConditions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            application_id?: string;
            onboarding_application_status?: string;
            request_status?: string;
            request_status_reason?: string;
            is_retry_operation_restricted?: boolean;
            remaining_allowed_retries?: number;
            failure_status_codes?: string[];
            verification_needed?: ReturnType<typeof OnboardingVerification.prototype.toObject>[];
            consents?: ReturnType<typeof TermsAndConditions.prototype.toObject>[];
            disclosures?: ReturnType<typeof TermsAndConditions.prototype.toObject>[];
        }) {
            const message = new OnboardingOperationResponseDetails({});
            if (data.application_id != null) {
                message.application_id = data.application_id;
            }
            if (data.onboarding_application_status != null) {
                message.onboarding_application_status = data.onboarding_application_status;
            }
            if (data.request_status != null) {
                message.request_status = data.request_status;
            }
            if (data.request_status_reason != null) {
                message.request_status_reason = data.request_status_reason;
            }
            if (data.is_retry_operation_restricted != null) {
                message.is_retry_operation_restricted = data.is_retry_operation_restricted;
            }
            if (data.remaining_allowed_retries != null) {
                message.remaining_allowed_retries = data.remaining_allowed_retries;
            }
            if (data.failure_status_codes != null) {
                message.failure_status_codes = data.failure_status_codes;
            }
            if (data.verification_needed != null) {
                message.verification_needed = data.verification_needed.map(item => OnboardingVerification.fromObject(item));
            }
            if (data.consents != null) {
                message.consents = data.consents.map(item => TermsAndConditions.fromObject(item));
            }
            if (data.disclosures != null) {
                message.disclosures = data.disclosures.map(item => TermsAndConditions.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                application_id?: string;
                onboarding_application_status?: string;
                request_status?: string;
                request_status_reason?: string;
                is_retry_operation_restricted?: boolean;
                remaining_allowed_retries?: number;
                failure_status_codes?: string[];
                verification_needed?: ReturnType<typeof OnboardingVerification.prototype.toObject>[];
                consents?: ReturnType<typeof TermsAndConditions.prototype.toObject>[];
                disclosures?: ReturnType<typeof TermsAndConditions.prototype.toObject>[];
            } = {};
            if (this.application_id != null) {
                data.application_id = this.application_id;
            }
            if (this.onboarding_application_status != null) {
                data.onboarding_application_status = this.onboarding_application_status;
            }
            if (this.request_status != null) {
                data.request_status = this.request_status;
            }
            if (this.request_status_reason != null) {
                data.request_status_reason = this.request_status_reason;
            }
            if (this.is_retry_operation_restricted != null) {
                data.is_retry_operation_restricted = this.is_retry_operation_restricted;
            }
            if (this.remaining_allowed_retries != null) {
                data.remaining_allowed_retries = this.remaining_allowed_retries;
            }
            if (this.failure_status_codes != null) {
                data.failure_status_codes = this.failure_status_codes;
            }
            if (this.verification_needed != null) {
                data.verification_needed = this.verification_needed.map((item: OnboardingVerification) => item.toObject());
            }
            if (this.consents != null) {
                data.consents = this.consents.map((item: TermsAndConditions) => item.toObject());
            }
            if (this.disclosures != null) {
                data.disclosures = this.disclosures.map((item: TermsAndConditions) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.application_id === "string" && this.application_id.length)
                writer.writeString(1, this.application_id);
            if (typeof this.onboarding_application_status === "string" && this.onboarding_application_status.length)
                writer.writeString(2, this.onboarding_application_status);
            if (typeof this.request_status === "string" && this.request_status.length)
                writer.writeString(3, this.request_status);
            if (typeof this.request_status_reason === "string" && this.request_status_reason.length)
                writer.writeString(4, this.request_status_reason);
            if (this.is_retry_operation_restricted !== undefined)
                writer.writeBool(5, this.is_retry_operation_restricted);
            if (this.remaining_allowed_retries !== undefined)
                writer.writeInt64(6, this.remaining_allowed_retries);
            if (this.failure_status_codes !== undefined)
                writer.writeRepeatedString(7, this.failure_status_codes);
            if (this.verification_needed !== undefined)
                writer.writeRepeatedMessage(8, this.verification_needed, (item: OnboardingVerification) => item.serialize(writer));
            if (this.consents !== undefined)
                writer.writeRepeatedMessage(9, this.consents, (item: TermsAndConditions) => item.serialize(writer));
            if (this.disclosures !== undefined)
                writer.writeRepeatedMessage(10, this.disclosures, (item: TermsAndConditions) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardingOperationResponseDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardingOperationResponseDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.application_id = reader.readString();
                        break;
                    case 2:
                        message.onboarding_application_status = reader.readString();
                        break;
                    case 3:
                        message.request_status = reader.readString();
                        break;
                    case 4:
                        message.request_status_reason = reader.readString();
                        break;
                    case 5:
                        message.is_retry_operation_restricted = reader.readBool();
                        break;
                    case 6:
                        message.remaining_allowed_retries = reader.readInt64();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        reader.readMessage(message.verification_needed, () => pb_1.Message.addToRepeatedWrapperField(message, 8, OnboardingVerification.deserialize(reader), OnboardingVerification));
                        break;
                    case 9:
                        reader.readMessage(message.consents, () => pb_1.Message.addToRepeatedWrapperField(message, 9, TermsAndConditions.deserialize(reader), TermsAndConditions));
                        break;
                    case 10:
                        reader.readMessage(message.disclosures, () => pb_1.Message.addToRepeatedWrapperField(message, 10, TermsAndConditions.deserialize(reader), TermsAndConditions));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardingOperationResponseDetails {
            return OnboardingOperationResponseDetails.deserialize(bytes);
        }
    }
    export class TermsAndConditions extends pb_1.Message {
        constructor(data?: any[] | {
            document_type?: string;
            document_name_and_version?: string;
            needed_before_validation?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("document_type" in data && data.document_type != undefined) {
                    this.document_type = data.document_type;
                }
                if ("document_name_and_version" in data && data.document_name_and_version != undefined) {
                    this.document_name_and_version = data.document_name_and_version;
                }
                if ("needed_before_validation" in data && data.needed_before_validation != undefined) {
                    this.needed_before_validation = data.needed_before_validation;
                }
            }
        }
        get document_type() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set document_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document_name_and_version() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set document_name_and_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get needed_before_validation() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set needed_before_validation(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            document_type?: string;
            document_name_and_version?: string;
            needed_before_validation?: boolean;
        }) {
            const message = new TermsAndConditions({});
            if (data.document_type != null) {
                message.document_type = data.document_type;
            }
            if (data.document_name_and_version != null) {
                message.document_name_and_version = data.document_name_and_version;
            }
            if (data.needed_before_validation != null) {
                message.needed_before_validation = data.needed_before_validation;
            }
            return message;
        }
        toObject() {
            const data: {
                document_type?: string;
                document_name_and_version?: string;
                needed_before_validation?: boolean;
            } = {};
            if (this.document_type != null) {
                data.document_type = this.document_type;
            }
            if (this.document_name_and_version != null) {
                data.document_name_and_version = this.document_name_and_version;
            }
            if (this.needed_before_validation != null) {
                data.needed_before_validation = this.needed_before_validation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.document_type === "string" && this.document_type.length)
                writer.writeString(1, this.document_type);
            if (typeof this.document_name_and_version === "string" && this.document_name_and_version.length)
                writer.writeString(2, this.document_name_and_version);
            if (this.needed_before_validation !== undefined)
                writer.writeBool(3, this.needed_before_validation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TermsAndConditions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TermsAndConditions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.document_type = reader.readString();
                        break;
                    case 2:
                        message.document_name_and_version = reader.readString();
                        break;
                    case 3:
                        message.needed_before_validation = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TermsAndConditions {
            return TermsAndConditions.deserialize(bytes);
        }
    }
    export class OnboardingVerification extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            required_updates?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("required_updates" in data && data.required_updates != undefined) {
                    this.required_updates = data.required_updates;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get required_updates() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set required_updates(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            required_updates?: string[];
        }) {
            const message = new OnboardingVerification({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.required_updates != null) {
                message.required_updates = data.required_updates;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                required_updates?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.required_updates != null) {
                data.required_updates = this.required_updates;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.required_updates !== undefined)
                writer.writeRepeatedString(2, this.required_updates);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardingVerification {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardingVerification();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardingVerification {
            return OnboardingVerification.deserialize(bytes);
        }
    }
    export class InitiateApplicationRequest extends pb_1.Message {
        constructor(data?: any[] | {
            bundle_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bundle_id" in data && data.bundle_id != undefined) {
                    this.bundle_id = data.bundle_id;
                }
            }
        }
        get bundle_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set bundle_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            bundle_id?: string;
        }) {
            const message = new InitiateApplicationRequest({});
            if (data.bundle_id != null) {
                message.bundle_id = data.bundle_id;
            }
            return message;
        }
        toObject() {
            const data: {
                bundle_id?: string;
            } = {};
            if (this.bundle_id != null) {
                data.bundle_id = this.bundle_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.bundle_id === "string" && this.bundle_id.length)
                writer.writeString(2, this.bundle_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitiateApplicationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitiateApplicationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.bundle_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitiateApplicationRequest {
            return InitiateApplicationRequest.deserialize(bytes);
        }
    }
    export class InitiateApplicationResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
            is_kyc_needed?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
                if ("is_kyc_needed" in data && data.is_kyc_needed != undefined) {
                    this.is_kyc_needed = data.is_kyc_needed;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get is_kyc_needed() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set is_kyc_needed(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            is_kyc_needed?: boolean;
        }) {
            const message = new InitiateApplicationResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            if (data.is_kyc_needed != null) {
                message.is_kyc_needed = data.is_kyc_needed;
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
                is_kyc_needed?: boolean;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            if (this.is_kyc_needed != null) {
                data.is_kyc_needed = this.is_kyc_needed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (this.is_kyc_needed !== undefined)
                writer.writeBool(2, this.is_kyc_needed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitiateApplicationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitiateApplicationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    case 2:
                        message.is_kyc_needed = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitiateApplicationResponse {
            return InitiateApplicationResponse.deserialize(bytes);
        }
    }
    export class UpdatePersonalDetailsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            customer_personal_details?: PersonalDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("customer_personal_details" in data && data.customer_personal_details != undefined) {
                    this.customer_personal_details = data.customer_personal_details;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_personal_details() {
            return pb_1.Message.getWrapperField(this, PersonalDetails, 2) as PersonalDetails;
        }
        set customer_personal_details(value: PersonalDetails) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            customer_personal_details?: ReturnType<typeof PersonalDetails.prototype.toObject>;
        }) {
            const message = new UpdatePersonalDetailsRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.customer_personal_details != null) {
                message.customer_personal_details = PersonalDetails.fromObject(data.customer_personal_details);
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                customer_personal_details?: ReturnType<typeof PersonalDetails.prototype.toObject>;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.customer_personal_details != null) {
                data.customer_personal_details = this.customer_personal_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.customer_personal_details !== undefined)
                writer.writeMessage(2, this.customer_personal_details, () => this.customer_personal_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePersonalDetailsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePersonalDetailsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.customer_personal_details, () => message.customer_personal_details = PersonalDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePersonalDetailsRequest {
            return UpdatePersonalDetailsRequest.deserialize(bytes);
        }
    }
    export class UpdatePersonalDetailsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdatePersonalDetailsResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePersonalDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePersonalDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePersonalDetailsResponse {
            return UpdatePersonalDetailsResponse.deserialize(bytes);
        }
    }
    export class UpdateContactDetailsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            customer_contact_details?: ContactDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("customer_contact_details" in data && data.customer_contact_details != undefined) {
                    this.customer_contact_details = data.customer_contact_details;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_contact_details() {
            return pb_1.Message.getWrapperField(this, ContactDetails, 2) as ContactDetails;
        }
        set customer_contact_details(value: ContactDetails) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            customer_contact_details?: ReturnType<typeof ContactDetails.prototype.toObject>;
        }) {
            const message = new UpdateContactDetailsRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.customer_contact_details != null) {
                message.customer_contact_details = ContactDetails.fromObject(data.customer_contact_details);
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                customer_contact_details?: ReturnType<typeof ContactDetails.prototype.toObject>;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.customer_contact_details != null) {
                data.customer_contact_details = this.customer_contact_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.customer_contact_details !== undefined)
                writer.writeMessage(2, this.customer_contact_details, () => this.customer_contact_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContactDetailsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContactDetailsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.customer_contact_details, () => message.customer_contact_details = ContactDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContactDetailsRequest {
            return UpdateContactDetailsRequest.deserialize(bytes);
        }
    }
    export class UpdateContactDetailsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateContactDetailsResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateContactDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateContactDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateContactDetailsResponse {
            return UpdateContactDetailsResponse.deserialize(bytes);
        }
    }
    export class UpdateAccountDetailsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            account_details?: AccountUsageDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("account_details" in data && data.account_details != undefined) {
                    this.account_details = data.account_details;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get account_details() {
            return pb_1.Message.getWrapperField(this, AccountUsageDetails, 2) as AccountUsageDetails;
        }
        set account_details(value: AccountUsageDetails) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            account_details?: ReturnType<typeof AccountUsageDetails.prototype.toObject>;
        }) {
            const message = new UpdateAccountDetailsRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.account_details != null) {
                message.account_details = AccountUsageDetails.fromObject(data.account_details);
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                account_details?: ReturnType<typeof AccountUsageDetails.prototype.toObject>;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.account_details != null) {
                data.account_details = this.account_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.account_details !== undefined)
                writer.writeMessage(2, this.account_details, () => this.account_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountDetailsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountDetailsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.account_details, () => message.account_details = AccountUsageDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountDetailsRequest {
            return UpdateAccountDetailsRequest.deserialize(bytes);
        }
    }
    export class UpdateAccountDetailsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateAccountDetailsResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAccountDetailsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAccountDetailsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAccountDetailsResponse {
            return UpdateAccountDetailsResponse.deserialize(bytes);
        }
    }
    export class UpdateEmploymentRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            employment_info?: Employment;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("employment_info" in data && data.employment_info != undefined) {
                    this.employment_info = data.employment_info;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get employment_info() {
            return pb_1.Message.getWrapperField(this, Employment, 2) as Employment;
        }
        set employment_info(value: Employment) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            employment_info?: ReturnType<typeof Employment.prototype.toObject>;
        }) {
            const message = new UpdateEmploymentRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.employment_info != null) {
                message.employment_info = Employment.fromObject(data.employment_info);
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                employment_info?: ReturnType<typeof Employment.prototype.toObject>;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.employment_info != null) {
                data.employment_info = this.employment_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.employment_info !== undefined)
                writer.writeMessage(2, this.employment_info, () => this.employment_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEmploymentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEmploymentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.employment_info, () => message.employment_info = Employment.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEmploymentRequest {
            return UpdateEmploymentRequest.deserialize(bytes);
        }
    }
    export class UpdateEmploymentResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateEmploymentResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEmploymentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEmploymentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEmploymentResponse {
            return UpdateEmploymentResponse.deserialize(bytes);
        }
    }
    export class UpdateCustomerResidencyRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            residency?: CustomerResidency;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("residency" in data && data.residency != undefined) {
                    this.residency = data.residency;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get residency() {
            return pb_1.Message.getWrapperField(this, CustomerResidency, 2) as CustomerResidency;
        }
        set residency(value: CustomerResidency) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            residency?: ReturnType<typeof CustomerResidency.prototype.toObject>;
        }) {
            const message = new UpdateCustomerResidencyRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.residency != null) {
                message.residency = CustomerResidency.fromObject(data.residency);
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                residency?: ReturnType<typeof CustomerResidency.prototype.toObject>;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.residency != null) {
                data.residency = this.residency.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.residency !== undefined)
                writer.writeMessage(2, this.residency, () => this.residency.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCustomerResidencyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCustomerResidencyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.residency, () => message.residency = CustomerResidency.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCustomerResidencyRequest {
            return UpdateCustomerResidencyRequest.deserialize(bytes);
        }
    }
    export class UpdateCustomerResidencyResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateCustomerResidencyResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCustomerResidencyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCustomerResidencyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCustomerResidencyResponse {
            return UpdateCustomerResidencyResponse.deserialize(bytes);
        }
    }
    export class UpdateConsentsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            consents?: Consent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("consents" in data && data.consents != undefined) {
                    this.consents = data.consents;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get consents() {
            return pb_1.Message.getRepeatedWrapperField(this, Consent, 2) as Consent[];
        }
        set consents(value: Consent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            consents?: ReturnType<typeof Consent.prototype.toObject>[];
        }) {
            const message = new UpdateConsentsRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.consents != null) {
                message.consents = data.consents.map(item => Consent.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                consents?: ReturnType<typeof Consent.prototype.toObject>[];
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.consents != null) {
                data.consents = this.consents.map((item: Consent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.consents !== undefined)
                writer.writeRepeatedMessage(2, this.consents, (item: Consent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateConsentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateConsentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.consents, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Consent.deserialize(reader), Consent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateConsentsRequest {
            return UpdateConsentsRequest.deserialize(bytes);
        }
    }
    export class UpdateConsentsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateConsentsResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateConsentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateConsentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateConsentsResponse {
            return UpdateConsentsResponse.deserialize(bytes);
        }
    }
    export class UpdateDisclosuresRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            disclosures?: Disclosure[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("disclosures" in data && data.disclosures != undefined) {
                    this.disclosures = data.disclosures;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get disclosures() {
            return pb_1.Message.getRepeatedWrapperField(this, Disclosure, 2) as Disclosure[];
        }
        set disclosures(value: Disclosure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            disclosures?: ReturnType<typeof Disclosure.prototype.toObject>[];
        }) {
            const message = new UpdateDisclosuresRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.disclosures != null) {
                message.disclosures = data.disclosures.map(item => Disclosure.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                disclosures?: ReturnType<typeof Disclosure.prototype.toObject>[];
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.disclosures != null) {
                data.disclosures = this.disclosures.map((item: Disclosure) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.disclosures !== undefined)
                writer.writeRepeatedMessage(2, this.disclosures, (item: Disclosure) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDisclosuresRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDisclosuresRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.disclosures, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Disclosure.deserialize(reader), Disclosure));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDisclosuresRequest {
            return UpdateDisclosuresRequest.deserialize(bytes);
        }
    }
    export class UpdateDisclosuresResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateDisclosuresResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDisclosuresResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDisclosuresResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDisclosuresResponse {
            return UpdateDisclosuresResponse.deserialize(bytes);
        }
    }
    export class UpdateAddressesRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            addresses?: Address[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addresses() {
            return pb_1.Message.getRepeatedWrapperField(this, Address, 2) as Address[];
        }
        set addresses(value: Address[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            addresses?: ReturnType<typeof Address.prototype.toObject>[];
        }) {
            const message = new UpdateAddressesRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.addresses != null) {
                message.addresses = data.addresses.map(item => Address.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                addresses?: ReturnType<typeof Address.prototype.toObject>[];
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.addresses != null) {
                data.addresses = this.addresses.map((item: Address) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.addresses !== undefined)
                writer.writeRepeatedMessage(2, this.addresses, (item: Address) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAddressesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAddressesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.addresses, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Address.deserialize(reader), Address));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAddressesRequest {
            return UpdateAddressesRequest.deserialize(bytes);
        }
    }
    export class UpdateAddressesResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateAddressesResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAddressesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAddressesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAddressesResponse {
            return UpdateAddressesResponse.deserialize(bytes);
        }
    }
    export class UpdateCommunicationPreferencesRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            customer_communication_pref?: string;
            customer_communication_language?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("customer_communication_pref" in data && data.customer_communication_pref != undefined) {
                    this.customer_communication_pref = data.customer_communication_pref;
                }
                if ("customer_communication_language" in data && data.customer_communication_language != undefined) {
                    this.customer_communication_language = data.customer_communication_language;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_communication_pref() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set customer_communication_pref(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get customer_communication_language() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set customer_communication_language(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            customer_communication_pref?: string;
            customer_communication_language?: string;
        }) {
            const message = new UpdateCommunicationPreferencesRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.customer_communication_pref != null) {
                message.customer_communication_pref = data.customer_communication_pref;
            }
            if (data.customer_communication_language != null) {
                message.customer_communication_language = data.customer_communication_language;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                customer_communication_pref?: string;
                customer_communication_language?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.customer_communication_pref != null) {
                data.customer_communication_pref = this.customer_communication_pref;
            }
            if (this.customer_communication_language != null) {
                data.customer_communication_language = this.customer_communication_language;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (typeof this.customer_communication_pref === "string" && this.customer_communication_pref.length)
                writer.writeString(2, this.customer_communication_pref);
            if (typeof this.customer_communication_language === "string" && this.customer_communication_language.length)
                writer.writeString(3, this.customer_communication_language);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCommunicationPreferencesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCommunicationPreferencesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        message.customer_communication_pref = reader.readString();
                        break;
                    case 3:
                        message.customer_communication_language = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCommunicationPreferencesRequest {
            return UpdateCommunicationPreferencesRequest.deserialize(bytes);
        }
    }
    export class UpdateCommunicationPreferencesResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new UpdateCommunicationPreferencesResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCommunicationPreferencesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCommunicationPreferencesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCommunicationPreferencesResponse {
            return UpdateCommunicationPreferencesResponse.deserialize(bytes);
        }
    }
    export class ValidateDocumentsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            document_details?: DocumentInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("document_details" in data && data.document_details != undefined) {
                    this.document_details = data.document_details;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document_details() {
            return pb_1.Message.getRepeatedWrapperField(this, DocumentInfo, 2) as DocumentInfo[];
        }
        set document_details(value: DocumentInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            document_details?: ReturnType<typeof DocumentInfo.prototype.toObject>[];
        }) {
            const message = new ValidateDocumentsRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.document_details != null) {
                message.document_details = data.document_details.map(item => DocumentInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                document_details?: ReturnType<typeof DocumentInfo.prototype.toObject>[];
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.document_details != null) {
                data.document_details = this.document_details.map((item: DocumentInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.document_details !== undefined)
                writer.writeRepeatedMessage(2, this.document_details, (item: DocumentInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateDocumentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateDocumentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.document_details, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DocumentInfo.deserialize(reader), DocumentInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateDocumentsRequest {
            return ValidateDocumentsRequest.deserialize(bytes);
        }
    }
    export class ValidateSelfieRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            file_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("file_name" in data && data.file_name != undefined) {
                    this.file_name = data.file_name;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set file_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            file_name?: string;
        }) {
            const message = new ValidateSelfieRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.file_name != null) {
                message.file_name = data.file_name;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                file_name?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.file_name != null) {
                data.file_name = this.file_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (typeof this.file_name === "string" && this.file_name.length)
                writer.writeString(2, this.file_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateSelfieRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateSelfieRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        message.file_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateSelfieRequest {
            return ValidateSelfieRequest.deserialize(bytes);
        }
    }
    export class ValidateApplicationRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
            document_details?: DocumentInfo[];
            selfie_file_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
                if ("document_details" in data && data.document_details != undefined) {
                    this.document_details = data.document_details;
                }
                if ("selfie_file_name" in data && data.selfie_file_name != undefined) {
                    this.selfie_file_name = data.selfie_file_name;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get document_details() {
            return pb_1.Message.getRepeatedWrapperField(this, DocumentInfo, 2) as DocumentInfo[];
        }
        set document_details(value: DocumentInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get selfie_file_name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set selfie_file_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
            document_details?: ReturnType<typeof DocumentInfo.prototype.toObject>[];
            selfie_file_name?: string;
        }) {
            const message = new ValidateApplicationRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            if (data.document_details != null) {
                message.document_details = data.document_details.map(item => DocumentInfo.fromObject(item));
            }
            if (data.selfie_file_name != null) {
                message.selfie_file_name = data.selfie_file_name;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
                document_details?: ReturnType<typeof DocumentInfo.prototype.toObject>[];
                selfie_file_name?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            if (this.document_details != null) {
                data.document_details = this.document_details.map((item: DocumentInfo) => item.toObject());
            }
            if (this.selfie_file_name != null) {
                data.selfie_file_name = this.selfie_file_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (this.document_details !== undefined)
                writer.writeRepeatedMessage(2, this.document_details, (item: DocumentInfo) => item.serialize(writer));
            if (typeof this.selfie_file_name === "string" && this.selfie_file_name.length)
                writer.writeString(3, this.selfie_file_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateApplicationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateApplicationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.document_details, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DocumentInfo.deserialize(reader), DocumentInfo));
                        break;
                    case 3:
                        message.selfie_file_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateApplicationRequest {
            return ValidateApplicationRequest.deserialize(bytes);
        }
    }
    export class ValidateDocumentsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new ValidateDocumentsResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateDocumentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateDocumentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateDocumentsResponse {
            return ValidateDocumentsResponse.deserialize(bytes);
        }
    }
    export class ValidateSelfieResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new ValidateSelfieResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateSelfieResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateSelfieResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateSelfieResponse {
            return ValidateSelfieResponse.deserialize(bytes);
        }
    }
    export class ValidateApplicationResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new ValidateApplicationResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateApplicationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateApplicationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateApplicationResponse {
            return ValidateApplicationResponse.deserialize(bytes);
        }
    }
    export class AcceptApplicationRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
        }) {
            const message = new AcceptApplicationRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcceptApplicationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcceptApplicationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcceptApplicationRequest {
            return AcceptApplicationRequest.deserialize(bytes);
        }
    }
    export class AcceptApplicationResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new AcceptApplicationResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcceptApplicationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcceptApplicationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AcceptApplicationResponse {
            return AcceptApplicationResponse.deserialize(bytes);
        }
    }
    export class FinalizeApplicationCreateCustomerRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
        }) {
            const message = new FinalizeApplicationCreateCustomerRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizeApplicationCreateCustomerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizeApplicationCreateCustomerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizeApplicationCreateCustomerRequest {
            return FinalizeApplicationCreateCustomerRequest.deserialize(bytes);
        }
    }
    export class FinalizeApplicationCreateCustomerResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
            customer_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
                if ("customer_id" in data && data.customer_id != undefined) {
                    this.customer_id = data.customer_id;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get customer_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set customer_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            customer_id?: string;
        }) {
            const message = new FinalizeApplicationCreateCustomerResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            if (data.customer_id != null) {
                message.customer_id = data.customer_id;
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
                customer_id?: string;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            if (this.customer_id != null) {
                data.customer_id = this.customer_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (typeof this.customer_id === "string" && this.customer_id.length)
                writer.writeString(2, this.customer_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizeApplicationCreateCustomerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizeApplicationCreateCustomerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    case 2:
                        message.customer_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizeApplicationCreateCustomerResponse {
            return FinalizeApplicationCreateCustomerResponse.deserialize(bytes);
        }
    }
    export class FinalizeApplicationCreateProductRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
        }) {
            const message = new FinalizeApplicationCreateProductRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizeApplicationCreateProductRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizeApplicationCreateProductRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizeApplicationCreateProductRequest {
            return FinalizeApplicationCreateProductRequest.deserialize(bytes);
        }
    }
    export class FinalizeApplicationCreateProductResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
            products?: OnboardedProduct[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get products() {
            return pb_1.Message.getRepeatedWrapperField(this, OnboardedProduct, 2) as OnboardedProduct[];
        }
        set products(value: OnboardedProduct[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            products?: ReturnType<typeof OnboardedProduct.prototype.toObject>[];
        }) {
            const message = new FinalizeApplicationCreateProductResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            if (data.products != null) {
                message.products = data.products.map(item => OnboardedProduct.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
                products?: ReturnType<typeof OnboardedProduct.prototype.toObject>[];
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            if (this.products != null) {
                data.products = this.products.map((item: OnboardedProduct) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (this.products !== undefined)
                writer.writeRepeatedMessage(2, this.products, (item: OnboardedProduct) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalizeApplicationCreateProductResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalizeApplicationCreateProductResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OnboardedProduct.deserialize(reader), OnboardedProduct));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalizeApplicationCreateProductResponse {
            return FinalizeApplicationCreateProductResponse.deserialize(bytes);
        }
    }
    export class CancelApplicationRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
        }) {
            const message = new CancelApplicationRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelApplicationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelApplicationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelApplicationRequest {
            return CancelApplicationRequest.deserialize(bytes);
        }
    }
    export class CancelApplicationResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new CancelApplicationResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelApplicationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelApplicationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelApplicationResponse {
            return CancelApplicationResponse.deserialize(bytes);
        }
    }
    export class GetApplicationStatusRequest extends pb_1.Message {
        constructor(data?: any[] | {
            application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("application_id" in data && data.application_id != undefined) {
                    this.application_id = data.application_id;
                }
            }
        }
        get application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            application_id?: string;
        }) {
            const message = new GetApplicationStatusRequest({});
            if (data.application_id != null) {
                message.application_id = data.application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                application_id?: string;
            } = {};
            if (this.application_id != null) {
                data.application_id = this.application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.application_id === "string" && this.application_id.length)
                writer.writeString(1, this.application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApplicationStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApplicationStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApplicationStatusRequest {
            return GetApplicationStatusRequest.deserialize(bytes);
        }
    }
    export class GetApplicationStatusResponse extends pb_1.Message {
        constructor(data?: any[] | {
            basic_details?: OnboardingOperationResponseDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("basic_details" in data && data.basic_details != undefined) {
                    this.basic_details = data.basic_details;
                }
            }
        }
        get basic_details() {
            return pb_1.Message.getWrapperField(this, OnboardingOperationResponseDetails, 1) as OnboardingOperationResponseDetails;
        }
        set basic_details(value: OnboardingOperationResponseDetails) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
        }) {
            const message = new GetApplicationStatusResponse({});
            if (data.basic_details != null) {
                message.basic_details = OnboardingOperationResponseDetails.fromObject(data.basic_details);
            }
            return message;
        }
        toObject() {
            const data: {
                basic_details?: ReturnType<typeof OnboardingOperationResponseDetails.prototype.toObject>;
            } = {};
            if (this.basic_details != null) {
                data.basic_details = this.basic_details.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.basic_details !== undefined)
                writer.writeMessage(1, this.basic_details, () => this.basic_details.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApplicationStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApplicationStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.basic_details, () => message.basic_details = OnboardingOperationResponseDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApplicationStatusResponse {
            return GetApplicationStatusResponse.deserialize(bytes);
        }
    }
    export class OnboardingApplicationCustomerOnboardedEvent extends pb_1.Message {
        constructor(data?: any[] | {
            event_id?: string;
            application_id?: string;
            tenant_id?: number;
            event_time?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("application_id" in data && data.application_id != undefined) {
                    this.application_id = data.application_id;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("event_time" in data && data.event_time != undefined) {
                    this.event_time = data.event_time;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get application_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set application_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tenant_id() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get event_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set event_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        static fromObject(data: {
            event_id?: string;
            application_id?: string;
            tenant_id?: number;
            event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }) {
            const message = new OnboardingApplicationCustomerOnboardedEvent({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.application_id != null) {
                message.application_id = data.application_id;
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.event_time != null) {
                message.event_time = dependency_1.google.protobuf.Timestamp.fromObject(data.event_time);
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: string;
                application_id?: string;
                tenant_id?: number;
                event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.application_id != null) {
                data.application_id = this.application_id;
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.event_time != null) {
                data.event_time = this.event_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.event_id === "string" && this.event_id.length)
                writer.writeString(1, this.event_id);
            if (typeof this.application_id === "string" && this.application_id.length)
                writer.writeString(2, this.application_id);
            if (this.tenant_id !== undefined)
                writer.writeInt32(4, this.tenant_id);
            if (this.event_time !== undefined)
                writer.writeMessage(5, this.event_time, () => this.event_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardingApplicationCustomerOnboardedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardingApplicationCustomerOnboardedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readString();
                        break;
                    case 2:
                        message.application_id = reader.readString();
                        break;
                    case 4:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.event_time, () => message.event_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardingApplicationCustomerOnboardedEvent {
            return OnboardingApplicationCustomerOnboardedEvent.deserialize(bytes);
        }
    }
    export class OnboardedProduct extends pb_1.Message {
        constructor(data?: any[] | {
            product_id?: string;
            source_domain?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("product_id" in data && data.product_id != undefined) {
                    this.product_id = data.product_id;
                }
                if ("source_domain" in data && data.source_domain != undefined) {
                    this.source_domain = data.source_domain;
                }
            }
        }
        get product_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set product_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get source_domain() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set source_domain(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            product_id?: string;
            source_domain?: string;
        }) {
            const message = new OnboardedProduct({});
            if (data.product_id != null) {
                message.product_id = data.product_id;
            }
            if (data.source_domain != null) {
                message.source_domain = data.source_domain;
            }
            return message;
        }
        toObject() {
            const data: {
                product_id?: string;
                source_domain?: string;
            } = {};
            if (this.product_id != null) {
                data.product_id = this.product_id;
            }
            if (this.source_domain != null) {
                data.source_domain = this.source_domain;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.product_id === "string" && this.product_id.length)
                writer.writeString(2, this.product_id);
            if (typeof this.source_domain === "string" && this.source_domain.length)
                writer.writeString(3, this.source_domain);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardedProduct {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardedProduct();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.product_id = reader.readString();
                        break;
                    case 3:
                        message.source_domain = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardedProduct {
            return OnboardedProduct.deserialize(bytes);
        }
    }
    export class OnboardingApplicationProductOnboardedEvent extends pb_1.Message {
        constructor(data?: any[] | {
            event_id?: string;
            application_id?: string;
            products?: OnboardedProduct[];
            tenant_id?: number;
            event_time?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("application_id" in data && data.application_id != undefined) {
                    this.application_id = data.application_id;
                }
                if ("products" in data && data.products != undefined) {
                    this.products = data.products;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("event_time" in data && data.event_time != undefined) {
                    this.event_time = data.event_time;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get application_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set application_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get products() {
            return pb_1.Message.getRepeatedWrapperField(this, OnboardedProduct, 3) as OnboardedProduct[];
        }
        set products(value: OnboardedProduct[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get tenant_id() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get event_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set event_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        static fromObject(data: {
            event_id?: string;
            application_id?: string;
            products?: ReturnType<typeof OnboardedProduct.prototype.toObject>[];
            tenant_id?: number;
            event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }) {
            const message = new OnboardingApplicationProductOnboardedEvent({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.application_id != null) {
                message.application_id = data.application_id;
            }
            if (data.products != null) {
                message.products = data.products.map(item => OnboardedProduct.fromObject(item));
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.event_time != null) {
                message.event_time = dependency_1.google.protobuf.Timestamp.fromObject(data.event_time);
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: string;
                application_id?: string;
                products?: ReturnType<typeof OnboardedProduct.prototype.toObject>[];
                tenant_id?: number;
                event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.application_id != null) {
                data.application_id = this.application_id;
            }
            if (this.products != null) {
                data.products = this.products.map((item: OnboardedProduct) => item.toObject());
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.event_time != null) {
                data.event_time = this.event_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.event_id === "string" && this.event_id.length)
                writer.writeString(1, this.event_id);
            if (typeof this.application_id === "string" && this.application_id.length)
                writer.writeString(2, this.application_id);
            if (this.products !== undefined)
                writer.writeRepeatedMessage(3, this.products, (item: OnboardedProduct) => item.serialize(writer));
            if (this.tenant_id !== undefined)
                writer.writeInt32(4, this.tenant_id);
            if (this.event_time !== undefined)
                writer.writeMessage(5, this.event_time, () => this.event_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardingApplicationProductOnboardedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardingApplicationProductOnboardedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readString();
                        break;
                    case 2:
                        message.application_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 3, OnboardedProduct.deserialize(reader), OnboardedProduct));
                        break;
                    case 4:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.event_time, () => message.event_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardingApplicationProductOnboardedEvent {
            return OnboardingApplicationProductOnboardedEvent.deserialize(bytes);
        }
    }
    export class IdentificationDocument extends pb_1.Message {
        constructor(data?: any[] | {
            id_number?: dependency_4.thebaasco.types.v1.ProtectedString;
            expiry_date?: dependency_4.thebaasco.types.v1.ProtectedDate;
            document_type?: string;
            document_country?: string;
            document_state?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_number" in data && data.id_number != undefined) {
                    this.id_number = data.id_number;
                }
                if ("expiry_date" in data && data.expiry_date != undefined) {
                    this.expiry_date = data.expiry_date;
                }
                if ("document_type" in data && data.document_type != undefined) {
                    this.document_type = data.document_type;
                }
                if ("document_country" in data && data.document_country != undefined) {
                    this.document_country = data.document_country;
                }
                if ("document_state" in data && data.document_state != undefined) {
                    this.document_state = data.document_state;
                }
            }
        }
        get id_number() {
            return pb_1.Message.getWrapperField(this, dependency_4.thebaasco.types.v1.ProtectedString, 1) as dependency_4.thebaasco.types.v1.ProtectedString;
        }
        set id_number(value: dependency_4.thebaasco.types.v1.ProtectedString) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get expiry_date() {
            return pb_1.Message.getWrapperField(this, dependency_4.thebaasco.types.v1.ProtectedDate, 2) as dependency_4.thebaasco.types.v1.ProtectedDate;
        }
        set expiry_date(value: dependency_4.thebaasco.types.v1.ProtectedDate) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get document_type() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set document_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get document_country() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set document_country(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get document_state() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set document_state(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id_number?: ReturnType<typeof dependency_4.thebaasco.types.v1.ProtectedString.prototype.toObject>;
            expiry_date?: ReturnType<typeof dependency_4.thebaasco.types.v1.ProtectedDate.prototype.toObject>;
            document_type?: string;
            document_country?: string;
            document_state?: string;
        }) {
            const message = new IdentificationDocument({});
            if (data.id_number != null) {
                message.id_number = dependency_4.thebaasco.types.v1.ProtectedString.fromObject(data.id_number);
            }
            if (data.expiry_date != null) {
                message.expiry_date = dependency_4.thebaasco.types.v1.ProtectedDate.fromObject(data.expiry_date);
            }
            if (data.document_type != null) {
                message.document_type = data.document_type;
            }
            if (data.document_country != null) {
                message.document_country = data.document_country;
            }
            if (data.document_state != null) {
                message.document_state = data.document_state;
            }
            return message;
        }
        toObject() {
            const data: {
                id_number?: ReturnType<typeof dependency_4.thebaasco.types.v1.ProtectedString.prototype.toObject>;
                expiry_date?: ReturnType<typeof dependency_4.thebaasco.types.v1.ProtectedDate.prototype.toObject>;
                document_type?: string;
                document_country?: string;
                document_state?: string;
            } = {};
            if (this.id_number != null) {
                data.id_number = this.id_number.toObject();
            }
            if (this.expiry_date != null) {
                data.expiry_date = this.expiry_date.toObject();
            }
            if (this.document_type != null) {
                data.document_type = this.document_type;
            }
            if (this.document_country != null) {
                data.document_country = this.document_country;
            }
            if (this.document_state != null) {
                data.document_state = this.document_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_number !== undefined)
                writer.writeMessage(1, this.id_number, () => this.id_number.serialize(writer));
            if (this.expiry_date !== undefined)
                writer.writeMessage(2, this.expiry_date, () => this.expiry_date.serialize(writer));
            if (typeof this.document_type === "string" && this.document_type.length)
                writer.writeString(3, this.document_type);
            if (typeof this.document_country === "string" && this.document_country.length)
                writer.writeString(4, this.document_country);
            if (typeof this.document_state === "string" && this.document_state.length)
                writer.writeString(5, this.document_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentificationDocument {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentificationDocument();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.id_number, () => message.id_number = dependency_4.thebaasco.types.v1.ProtectedString.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.expiry_date, () => message.expiry_date = dependency_4.thebaasco.types.v1.ProtectedDate.deserialize(reader));
                        break;
                    case 3:
                        message.document_type = reader.readString();
                        break;
                    case 4:
                        message.document_country = reader.readString();
                        break;
                    case 5:
                        message.document_state = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdentificationDocument {
            return IdentificationDocument.deserialize(bytes);
        }
    }
    export class OnboardingApplicationDataConfirmedEvent extends pb_1.Message {
        constructor(data?: any[] | {
            event_id?: string;
            application?: OnboardingApplication;
            tenant_id?: number;
            event_time?: dependency_1.google.protobuf.Timestamp;
            id_document?: IdentificationDocument[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("application" in data && data.application != undefined) {
                    this.application = data.application;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("event_time" in data && data.event_time != undefined) {
                    this.event_time = data.event_time;
                }
                if ("id_document" in data && data.id_document != undefined) {
                    this.id_document = data.id_document;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get application() {
            return pb_1.Message.getWrapperField(this, OnboardingApplication, 2) as OnboardingApplication;
        }
        set application(value: OnboardingApplication) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get tenant_id() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get event_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set event_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get id_document() {
            return pb_1.Message.getRepeatedWrapperField(this, IdentificationDocument, 5) as IdentificationDocument[];
        }
        set id_document(value: IdentificationDocument[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            event_id?: string;
            application?: ReturnType<typeof OnboardingApplication.prototype.toObject>;
            tenant_id?: number;
            event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            id_document?: ReturnType<typeof IdentificationDocument.prototype.toObject>[];
        }) {
            const message = new OnboardingApplicationDataConfirmedEvent({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.application != null) {
                message.application = OnboardingApplication.fromObject(data.application);
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.event_time != null) {
                message.event_time = dependency_1.google.protobuf.Timestamp.fromObject(data.event_time);
            }
            if (data.id_document != null) {
                message.id_document = data.id_document.map(item => IdentificationDocument.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: string;
                application?: ReturnType<typeof OnboardingApplication.prototype.toObject>;
                tenant_id?: number;
                event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                id_document?: ReturnType<typeof IdentificationDocument.prototype.toObject>[];
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.application != null) {
                data.application = this.application.toObject();
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.event_time != null) {
                data.event_time = this.event_time.toObject();
            }
            if (this.id_document != null) {
                data.id_document = this.id_document.map((item: IdentificationDocument) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.event_id === "string" && this.event_id.length)
                writer.writeString(1, this.event_id);
            if (this.application !== undefined)
                writer.writeMessage(2, this.application, () => this.application.serialize(writer));
            if (this.tenant_id !== undefined)
                writer.writeInt32(3, this.tenant_id);
            if (this.event_time !== undefined)
                writer.writeMessage(4, this.event_time, () => this.event_time.serialize(writer));
            if (this.id_document !== undefined)
                writer.writeRepeatedMessage(5, this.id_document, (item: IdentificationDocument) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardingApplicationDataConfirmedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardingApplicationDataConfirmedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.application, () => message.application = OnboardingApplication.deserialize(reader));
                        break;
                    case 3:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.event_time, () => message.event_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.id_document, () => pb_1.Message.addToRepeatedWrapperField(message, 5, IdentificationDocument.deserialize(reader), IdentificationDocument));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardingApplicationDataConfirmedEvent {
            return OnboardingApplicationDataConfirmedEvent.deserialize(bytes);
        }
    }
    export class OnboardingApplicationCanceledEvent extends pb_1.Message {
        constructor(data?: any[] | {
            event_id?: string;
            tenant_id?: number;
            event_time?: dependency_1.google.protobuf.Timestamp;
            application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("event_time" in data && data.event_time != undefined) {
                    this.event_time = data.event_time;
                }
                if ("application_id" in data && data.application_id != undefined) {
                    this.application_id = data.application_id;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tenant_id() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get event_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set event_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get application_id() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set application_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            event_id?: string;
            tenant_id?: number;
            event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            application_id?: string;
        }) {
            const message = new OnboardingApplicationCanceledEvent({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.event_time != null) {
                message.event_time = dependency_1.google.protobuf.Timestamp.fromObject(data.event_time);
            }
            if (data.application_id != null) {
                message.application_id = data.application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: string;
                tenant_id?: number;
                event_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                application_id?: string;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.event_time != null) {
                data.event_time = this.event_time.toObject();
            }
            if (this.application_id != null) {
                data.application_id = this.application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.event_id === "string" && this.event_id.length)
                writer.writeString(1, this.event_id);
            if (this.tenant_id !== undefined)
                writer.writeInt32(2, this.tenant_id);
            if (this.event_time !== undefined)
                writer.writeMessage(3, this.event_time, () => this.event_time.serialize(writer));
            if (typeof this.application_id === "string" && this.application_id.length)
                writer.writeString(4, this.application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnboardingApplicationCanceledEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnboardingApplicationCanceledEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readString();
                        break;
                    case 2:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.event_time, () => message.event_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        message.application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnboardingApplicationCanceledEvent {
            return OnboardingApplicationCanceledEvent.deserialize(bytes);
        }
    }
    export class CreateFileUploadURLRequest extends pb_1.Message {
        constructor(data?: any[] | {
            onboarding_application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("onboarding_application_id" in data && data.onboarding_application_id != undefined) {
                    this.onboarding_application_id = data.onboarding_application_id;
                }
            }
        }
        get onboarding_application_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set onboarding_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            onboarding_application_id?: string;
        }) {
            const message = new CreateFileUploadURLRequest({});
            if (data.onboarding_application_id != null) {
                message.onboarding_application_id = data.onboarding_application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                onboarding_application_id?: string;
            } = {};
            if (this.onboarding_application_id != null) {
                data.onboarding_application_id = this.onboarding_application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.onboarding_application_id === "string" && this.onboarding_application_id.length)
                writer.writeString(1, this.onboarding_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFileUploadURLRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFileUploadURLRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.onboarding_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateFileUploadURLRequest {
            return CreateFileUploadURLRequest.deserialize(bytes);
        }
    }
    export class CreateFileUploadURLResponse extends pb_1.Message {
        constructor(data?: any[] | {
            filename?: string;
            upload_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filename" in data && data.filename != undefined) {
                    this.filename = data.filename;
                }
                if ("upload_url" in data && data.upload_url != undefined) {
                    this.upload_url = data.upload_url;
                }
            }
        }
        get filename() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set filename(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get upload_url() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set upload_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            filename?: string;
            upload_url?: string;
        }) {
            const message = new CreateFileUploadURLResponse({});
            if (data.filename != null) {
                message.filename = data.filename;
            }
            if (data.upload_url != null) {
                message.upload_url = data.upload_url;
            }
            return message;
        }
        toObject() {
            const data: {
                filename?: string;
                upload_url?: string;
            } = {};
            if (this.filename != null) {
                data.filename = this.filename;
            }
            if (this.upload_url != null) {
                data.upload_url = this.upload_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.filename === "string" && this.filename.length)
                writer.writeString(1, this.filename);
            if (typeof this.upload_url === "string" && this.upload_url.length)
                writer.writeString(2, this.upload_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFileUploadURLResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFileUploadURLResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.filename = reader.readString();
                        break;
                    case 2:
                        message.upload_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateFileUploadURLResponse {
            return CreateFileUploadURLResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOnboardingServiceService {
        static definition = {
            GetApplicationStatus: {
                path: "/thebaasco.tenant.onboarding.v1.OnboardingService/GetApplicationStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetApplicationStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetApplicationStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetApplicationStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetApplicationStatusResponse.deserialize(new Uint8Array(bytes))
            },
            CreateFileUploadURL: {
                path: "/thebaasco.tenant.onboarding.v1.OnboardingService/CreateFileUploadURL",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateFileUploadURLRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateFileUploadURLRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateFileUploadURLResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateFileUploadURLResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetApplicationStatus(call: grpc_1.ServerUnaryCall<GetApplicationStatusRequest, GetApplicationStatusResponse>, callback: grpc_1.sendUnaryData<GetApplicationStatusResponse>): void;
        abstract CreateFileUploadURL(call: grpc_1.ServerUnaryCall<CreateFileUploadURLRequest, CreateFileUploadURLResponse>, callback: grpc_1.sendUnaryData<CreateFileUploadURLResponse>): void;
    }
    export class OnboardingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOnboardingServiceService.definition, "OnboardingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetApplicationStatus: GrpcUnaryServiceInterface<GetApplicationStatusRequest, GetApplicationStatusResponse> = (message: GetApplicationStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetApplicationStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetApplicationStatusResponse>, callback?: grpc_1.requestCallback<GetApplicationStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetApplicationStatus(message, metadata, options, callback);
        };
        CreateFileUploadURL: GrpcUnaryServiceInterface<CreateFileUploadURLRequest, CreateFileUploadURLResponse> = (message: CreateFileUploadURLRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateFileUploadURLResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateFileUploadURLResponse>, callback?: grpc_1.requestCallback<CreateFileUploadURLResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateFileUploadURL(message, metadata, options, callback);
        };
    }
}
